import os
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è onnxruntime
os.environ['ONNXRUNTIME_PROVIDERS'] = 'CPUExecutionProvider'
os.environ['ORT_LOGGING_LEVEL'] = '3'  # –¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
os.environ['ORT_DISABLE_TENSORRT'] = '1'
os.environ['ORT_DISABLE_CUDA'] = '1'

import warnings
warnings.filterwarnings("ignore", category=UserWarning)
warnings.filterwarnings("ignore", category=RuntimeWarning, module="onnxruntime")

import logging
import logging.handlers

# –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
log_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - [USER_ID:%(user_id)s] - %(message)s')

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
file_handler = logging.handlers.RotatingFileHandler(
    'bot.log',
    maxBytes=10485760,  # 10MB
    backupCount=5,
    encoding='utf-8'
)
file_handler.setFormatter(log_formatter)

# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
console_handler = logging.StreamHandler()
console_handler.setFormatter(log_formatter)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.addHandler(file_handler)
logger.addHandler(console_handler)

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è user_id
class UserIDFilter(logging.Filter):
    def filter(self, record):
        if not hasattr(record, 'user_id'):
            record.user_id = 'N/A'
        return True

logger.addFilter(UserIDFilter())

import base64
import json
import time
import requests
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest
import asyncio
import aiohttp
import io
import uuid as uuid_lib
from PIL import Image, ImageEnhance, ImageFilter
from rembg import remove
from collections import defaultdict

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = os.getenv('API_TOKEN')
FUSIONBRAIN_API_KEY = os.getenv('FUSIONBRAIN_API_KEY')
FUSIONBRAIN_SECRET_KEY = os.getenv('FUSIONBRAIN_SECRET_KEY')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not all([API_TOKEN, FUSIONBRAIN_API_KEY, FUSIONBRAIN_SECRET_KEY]):
    logger.error("–ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    if not API_TOKEN:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API_TOKEN")
    if not FUSIONBRAIN_API_KEY:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç FUSIONBRAIN_API_KEY")
    if not FUSIONBRAIN_SECRET_KEY:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç FUSIONBRAIN_SECRET_KEY")
    sys.exit(1)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–µ–π
if any([' ' in key for key in [FUSIONBRAIN_API_KEY, FUSIONBRAIN_SECRET_KEY]]):
    logger.error("API –∫–ª—é—á–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª–æ–≤!")
    sys.exit(1)

if any(['"' in key or "'" in key for key in [FUSIONBRAIN_API_KEY, FUSIONBRAIN_SECRET_KEY]]):
    logger.error("API –∫–ª—é—á–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∞–≤—ã—á–µ–∫!")
    sys.exit(1)

logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
logger.debug(f"API Key length: {len(FUSIONBRAIN_API_KEY)}, Secret Key length: {len(FUSIONBRAIN_SECRET_KEY)}")

START_IMAGE_URL = 'https://–≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

class CensorshipError(Exception):
    pass

class Text2ImageAPI:
    MAX_PROMPT_LENGTH = 500

    def __init__(self, api_key, secret_key):
        self.URL = 'https://api-key.fusionbrain.ai'
        self.api_key = api_key
        self.secret_key = secret_key

    async def _make_request(self, method, url, **kwargs):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
        headers = {
            'X-Key': f'Key {self.api_key}',
            'X-Secret': f'Secret {self.secret_key}'
        }
        
        if 'headers' in kwargs:
            headers.update(kwargs.pop('headers'))
        
        if 'json' in kwargs:
            headers['Content-Type'] = 'application/json'
        
        logger.info(
            f"Making API request: method={method}, url={url}",
            extra={
                'headers': {k: v for k, v in headers.items() if not k.lower().startswith('x-')},
                'method': method
            }
        )
        
        async with aiohttp.ClientSession() as session:
            async with session.request(method, url, headers=headers, **kwargs) as response:
                text = await response.text()
                logger.info(
                    f"API Response: url={url}, status={response.status}, response={text}",
                    extra={'method': method, 'status': response.status}
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
                if response.status not in [200, 201]:
                    raise Exception(f'API request failed ({response.status}): {text}')
                
                try:
                    return await response.json() if text else None
                except json.JSONDecodeError as e:
                    raise Exception(f'Failed to parse JSON response: {text}') from e

    def _prepare_prompt(self, prompt):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞: –æ–±—Ä–µ–∑–∫–∞ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã"""
        if len(prompt) > self.MAX_PROMPT_LENGTH:
            logger.warning(f"Prompt too long ({len(prompt)} chars), truncating to {self.MAX_PROMPT_LENGTH}")
            return prompt[:self.MAX_PROMPT_LENGTH] + "..."
        return prompt

    async def get_model(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        return await self._make_request('GET', f'{self.URL}/key/api/v1/models', json={})

    async def generate(self, prompt, model_id, width=1024, height=1024):
        """–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        params = {
            "type": "GENERATE",
            "numImages": 1,
            "width": width,
            "height": height,
            "generateParams": {
                "query": self._prepare_prompt(prompt)
            }
        }
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤
        form = aiohttp.FormData()
        form.add_field('model_id', str(model_id))
        form.add_field('params', json.dumps(params), content_type='application/json')
        
        result = await self._make_request(
            'POST',
            f'{self.URL}/key/api/v1/text2image/run',
            data=form
        )
        
        uuid = result.get('uuid')
        if not uuid:
            raise Exception('Failed to get UUID from response')
            
        logger.info(f"Generation started with UUID: {uuid}")
        return uuid

    async def check_generation(self, uuid):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        result = await self._make_request(
            'GET',
            f'{self.URL}/key/api/v1/text2image/status/{uuid}',
            json={}
        )
        
        status = result.get('status')
        if not status:
            raise Exception('No status in response')
            
        logger.info(f"Generation status: {status}", extra={'uuid': uuid})
        
        if status == 'DONE':
            images = result.get('images', [])
            if not images:
                raise CensorshipError("–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é")
            return base64.b64decode(images[0])
        elif status == 'FAILED':
            error = result.get('error', 'Unknown error')
            raise Exception(f'Generation failed: {error}')
        else:
            raise Exception('Generation still in progress')

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —ç–º–æ–¥–∑–∏
class Emoji:
    SETTINGS = "‚öôÔ∏è"
    CREATE = "üé®"
    BACK = "‚óÄÔ∏è"
    HELP = "‚ùì"
    REMOVE_BG = "üé≠"
    WAIT = "‚è≥"
    ERROR = "‚ùå"
    SUCCESS = "‚úÖ"
    EDIT = "‚úèÔ∏è"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤
class Messages:
    WELCOME = f"""
–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ Kandinsky.

–ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é
‚Ä¢ –£–¥–∞–ª—è—Ç—å —Ñ–æ–Ω —Å –≥–æ—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª—è—Ö

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É {Emoji.CREATE} <b>–°–æ–∑–¥–∞—Ç—å</b>, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!
"""
    
    HELP = f"""
{Emoji.CREATE} <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:</b>

1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É {Emoji.CREATE} <b>–°–æ–∑–¥–∞—Ç—å</b>
2. –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Å—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
3. –û–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
4. –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É {Emoji.REMOVE_BG} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞

{Emoji.SETTINGS} <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –±—É–¥—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
"""
    
    SETTINGS = f"""{Emoji.SETTINGS} <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>

–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: <b>{{width}}x{{height}}</b>

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä:"""
    
    STYLES = f"""{Emoji.SETTINGS} <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>

–¢–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å: <b>{{style_label}}</b>

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∏–ª—å:"""
    
    STYLE_CHANGED = f"{Emoji.SUCCESS} –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∏–ª—å: <b>{{style}}</b>"
    
    CURRENT_SETTINGS = f"""{Emoji.SETTINGS} <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>

–°—Ç–∏–ª—å: <b>{{style}}</b>
–†–∞–∑–º–µ—Ä: <b>{{size}}</b>

{Emoji.EDIT} –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"""
    
    PROMPT = f"""{Emoji.EDIT} <b>–û–ø–∏—à–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</b>

–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–≤–∏–¥–µ—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. 
–ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!

–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ –°—Ç–∏–ª—å: <b>{{style}}</b>
‚Ä¢ –†–∞–∑–º–µ—Ä: <b>{{size}}</b>

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ —Å—Ç–∏–ª–µ –∫–∏–±–µ—Ä–ø–∞–Ω–∫"
‚Ä¢ "–ö–æ—Ç–µ–Ω–æ–∫ –∏–≥—Ä–∞–µ—Ç —Å –∫–ª—É–±–∫–æ–º, –∞–∫–≤–∞—Ä–µ–ª—å"
‚Ä¢ "–ó–∞–∫–∞—Ç –Ω–∞ –º–æ—Ä–µ, –º–∞—Å–ª—è–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å"
"""
    
    GENERATING = f"{Emoji.WAIT} <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...</b>"
    REMOVING_BG = f"{Emoji.WAIT} <b>–£–¥–∞–ª—è—é —Ñ–æ–Ω...</b>"
    SIZE_CHANGED = f"{Emoji.SUCCESS} –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–∞–∑–º–µ—Ä: <b>{{size}}</b>"
    ERROR_GEN = f"{Emoji.ERROR} –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {{error}}"
    ERROR_SIZE = f"{Emoji.ERROR} –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä"
    ERROR_CRITICAL = f"{Emoji.ERROR} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞"
    BG_REMOVED = f"{Emoji.SUCCESS} –§–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!"
    MAIN_MENU = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–æ–ª–±—ç–∫–æ–≤
class CallbackData:
    SETTINGS = "settings"
    GENERATE = "generate"
    SIZE_PREFIX = "size_"
    HELP = "help"
    BACK = "back_to_main"
    REMOVE_BG = "remove_bg"
    STYLES = "styles"  # –ù–æ–≤—ã–π callback –¥–ª—è –º–µ–Ω—é —Å—Ç–∏–ª–µ–π
    STYLE_PREFIX = "style_"  # –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
IMAGE_SIZES = {
    "square": {
        "width": 1024, 
        "height": 1024, 
        "label": "–ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ 1024√ó1024",
        "description": "–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ –∏ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã—Ö –∫–æ–º–ø–æ–∑–∏—Ü–∏–π"
    },
    "wide": {
        "width": 1024, 
        "height": 576, 
        "label": "–®–∏—Ä–æ–∫–æ–µ 1024√ó576",
        "description": "–û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–µ–π–∑–∞–∂–µ–π –∏ –ø–∞–Ω–æ—Ä–∞–º–Ω—ã—Ö —Å—Ü–µ–Ω"
    },
    "tall": {
        "width": 576, 
        "height": 1024, 
        "label": "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ 576√ó1024",
        "description": "–õ—É—á—à–∏–π –≤—ã–±–æ—Ä –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç"
    }
}

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
IMAGE_STYLES = {
    "DEFAULT": {
        "label": "–û–±—ã—á–Ω—ã–π",
        "prompt_prefix": "",
        "description": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ç–∏–ª—å –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π"
    },
    "ANIME": {
        "label": "–ê–Ω–∏–º–µ",
        "prompt_prefix": "anime style, anime art, ",
        "description": "–°—Ç–∏–ª—å —è–ø–æ–Ω—Å–∫–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏"
    },
    "REALISTIC": {
        "label": "–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π",
        "prompt_prefix": "realistic, photorealistic, hyperrealistic, ",
        "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    },
    "PORTRAIT": {
        "label": "–ü–æ—Ä—Ç—Ä–µ—Ç",
        "prompt_prefix": "portrait style, professional portrait, ",
        "description": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π —Å—Ç–∏–ª—å"
    },
    "STUDIO_GHIBLI": {
        "label": "–°—Ç—É–¥–∏—è –ì–∏–±–ª–∏",
        "prompt_prefix": "studio ghibli style, ghibli anime, ",
        "description": "–í —Å—Ç–∏–ª–µ –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –°—Ç—É–¥–∏–∏ –ì–∏–±–ª–∏"
    },
    "CYBERPUNK": {
        "label": "–ö–∏–±–µ—Ä–ø–∞–Ω–∫",
        "prompt_prefix": "cyberpunk style, neon, futuristic, ",
        "description": "–§—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å –∫–∏–±–µ—Ä–ø–∞–Ω–∫–∞"
    },
    "WATERCOLOR": {
        "label": "–ê–∫–≤–∞—Ä–µ–ª—å",
        "prompt_prefix": "watercolor painting, watercolor art style, ",
        "description": "–ê–∫–≤–∞—Ä–µ–ª—å–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å"
    },
    "OIL_PAINTING": {
        "label": "–ú–∞—Å–ª–æ",
        "prompt_prefix": "oil painting style, classical art, ",
        "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –º–∞—Å–ª—è–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å"
    },
    "PENCIL_DRAWING": {
        "label": "–ö–∞—Ä–∞–Ω–¥–∞—à",
        "prompt_prefix": "pencil drawing, sketch style, ",
        "description": "–ö–∞—Ä–∞–Ω–¥–∞—à–Ω—ã–π —Ä–∏—Å—É–Ω–æ–∫"
    },
    "DIGITAL_ART": {
        "label": "–¶–∏—Ñ—Ä–æ–≤–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ",
        "prompt_prefix": "digital art, digital painting, ",
        "description": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ü–∏—Ñ—Ä–æ–≤–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ"
    },
    "POP_ART": {
        "label": "–ü–æ–ø-–∞—Ä—Ç",
        "prompt_prefix": "pop art style, vibrant colors, ",
        "description": "–Ø—Ä–∫–∏–π —Å—Ç–∏–ª—å –ø–æ–ø-–∞—Ä—Ç"
    },
    "STEAMPUNK": {
        "label": "–°—Ç–∏–º–ø–∞–Ω–∫",
        "prompt_prefix": "steampunk style, victorian sci-fi, ",
        "description": "–í–∏–∫—Ç–æ—Ä–∏–∞–Ω—Å–∫–∏–π –Ω–∞—É—á–Ω–æ-—Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å"
    },
    "MINIMALIST": {
        "label": "–ú–∏–Ω–∏–º–∞–ª–∏–∑–º",
        "prompt_prefix": "minimalist style, simple, clean, ",
        "description": "–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ç–∏–ª—å"
    },
    "FANTASY": {
        "label": "–§—ç–Ω—Ç–µ–∑–∏",
        "prompt_prefix": "fantasy art style, magical, mystical, ",
        "description": "–§—ç–Ω—Ç–µ–∑–∏–π–Ω—ã–π —Å—Ç–∏–ª—å"
    }
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserState:
    def __init__(self):
        self.width = 1024
        self.height = 1024
        self.awaiting_prompt = False
        self.last_image = None  # –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.last_image_id = None  # ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è callback

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
class UserSettings:
    def __init__(self):
        self.width = 1024
        self.height = 1024
        self.style = "DEFAULT"  # –°—Ç–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

user_states = defaultdict(UserState)
user_settings = defaultdict(UserSettings)

# –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
class ImageProcessor:
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    MAX_SIZE = 1500
    # –•—Ä–∞–Ω–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–µ–ª–∏
    _model = None
    
    @classmethod
    def _get_model(cls):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–µ–ª–∏"""
        if cls._model is None:
            from rembg.bg import remove as remove_bg
            cls._model = remove_bg
        return cls._model

    @classmethod
    def _resize_if_needed(cls, image: Image.Image) -> tuple[Image.Image, tuple[int, int]]:
        """–£–º–µ–Ω—å—à–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ"""
        original_size = image.size
        width, height = original_size
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É–º–µ–Ω—å—à–∞—Ç—å
        if max(width, height) <= cls.MAX_SIZE:
            return image, None
            
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
        if width > height:
            new_width = cls.MAX_SIZE
            new_height = int(height * (cls.MAX_SIZE / width))
        else:
            new_height = cls.MAX_SIZE
            new_width = int(width * (cls.MAX_SIZE / height))
            
        # –£–º–µ–Ω—å—à–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        resized_image = image.resize((new_width, new_height), Image.Resampling.LANCZOS)
        return resized_image, original_size

    @classmethod
    def _restore_size(cls, image: Image.Image, original_size: tuple[int, int]) -> Image.Image:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É"""
        if original_size:
            return image.resize(original_size, Image.Resampling.LANCZOS)
        return image

    @classmethod
    async def remove_background(cls, image_data: bytes) -> bytes:
        """–£–¥–∞–ª—è–µ—Ç —Ñ–æ–Ω —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –±–∞–π—Ç–æ–≤
            input_image = Image.open(io.BytesIO(image_data))
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if input_image.mode not in ('RGB', 'RGBA'):
                input_image = input_image.convert('RGB')
            
            # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            resized_image, original_size = cls._resize_if_needed(input_image)
            
            # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –∏ —É–¥–∞–ª—è–µ–º —Ñ–æ–Ω
            remove_bg = cls._get_model()
            output_image = remove_bg(resized_image)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—ã–ª–æ —É–º–µ–Ω—å—à–µ–Ω–æ
            if original_size:
                output_image = cls._restore_size(output_image, original_size)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–π—Ç—ã
            output_buffer = io.BytesIO()
            output_image.save(output_buffer, format='PNG', optimize=True)
            return output_buffer.getvalue()
            
        except Exception as e:
            logger.error(f"Error removing background: {str(e)}")
            raise

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º", extra={'user_id': user_id})
    keyboard = get_main_keyboard()
    await message.answer(
        Messages.WELCOME,
        reply_markup=keyboard
    )

async def update_message(message: types.Message, text: str, reply_markup: InlineKeyboardMarkup = None) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        # –ü—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.edit_text(text, reply_markup=reply_markup)
    except (TelegramBadRequest, AttributeError):
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await message.answer(text, reply_markup=reply_markup)

@dp.callback_query(lambda c: c.data == CallbackData.HELP)
async def show_help(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å", extra={'user_id': user_id})
    help_text = Messages.HELP
    await update_message(callback_query.message, help_text, get_main_keyboard())
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == CallbackData.SETTINGS)
async def show_settings(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", extra={'user_id': user_id})
    settings = user_settings[user_id]
    await update_message(
        callback_query.message,
        Messages.SETTINGS.format(width=settings.width, height=settings.height),
        get_settings_keyboard()
    )
    await callback_query.answer()

@dp.callback_query(lambda c: c.data.startswith(CallbackData.SIZE_PREFIX))
async def process_size_change(callback_query: CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        size_key = callback_query.data.replace(CallbackData.SIZE_PREFIX, "")
        
        if size_key not in IMAGE_SIZES:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á —Ä–∞–∑–º–µ—Ä–∞: {size_key}", extra={'user_id': user_id})
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä")
            return
            
        size_config = IMAGE_SIZES[size_key]
        user_settings[user_id].width = size_config["width"]
        user_settings[user_id].height = size_config["height"]
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ {size_config['label']}", extra={'user_id': user_id})
        
        if user_states[user_id].awaiting_prompt:
            # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await update_message(
                callback_query.message,
                Messages.CURRENT_SETTINGS.format(
                    style=IMAGE_STYLES[user_settings[user_id].style]["label"],
                    size=size_config['label']
                ),
                get_prompt_keyboard()
            )
        else:
            # –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
            await update_message(
                callback_query.message,
                Messages.SIZE_CHANGED.format(size=size_config['label']),
                get_main_keyboard()
            )
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞: {str(e)}", exc_info=True, extra={'user_id': user_id})
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(lambda c: c.data == CallbackData.GENERATE)
async def start_generation(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    user_states[user_id].awaiting_prompt = True
    settings = user_settings[user_id]
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", extra={'user_id': user_id})
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç
    await update_message(
        callback_query.message,
        Messages.CURRENT_SETTINGS.format(
            style=IMAGE_STYLES[settings.style]["label"],
            size=f"{settings.width}x{settings.height}"
        ),
        get_prompt_keyboard()
    )
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == CallbackData.BACK)
async def back_to_main(callback_query: CallbackQuery):
    await update_message(
        callback_query.message,
        Messages.MAIN_MENU,
        get_main_keyboard()
    )
    await callback_query.answer()

@dp.message()
async def generate_image(message: types.Message):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞"""
    try:
        user_id = message.from_user.id
        
        if not user_states[user_id].awaiting_prompt:
            return
        
        user_states[user_id].awaiting_prompt = False
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        settings = user_settings[user_id]
        style_info = IMAGE_STYLES[settings.style]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º —Å—Ç–∏–ª—è
        prompt = f"{style_info['prompt_prefix']}{message.text}"
        
        logger.info(f"–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", extra={
            'user_id': user_id,
            'prompt': prompt,
            'style': settings.style,
            'size': f"{settings.width}x{settings.height}"
        })
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        status_message = await message.answer(
            Messages.GENERATING,
            reply_markup=None
        )
        
        try:
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API
            api = Text2ImageAPI(
                api_key=FUSIONBRAIN_API_KEY,
                secret_key=FUSIONBRAIN_SECRET_KEY
            )
            
            logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π", extra={'user_id': user_id})
            
            # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å
            models = await api.get_model()
            if not models:
                raise Exception("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
            model_id = models[0]["id"]
            
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: {model_id}", extra={'user_id': user_id})
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            logger.info("–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", extra={'user_id': user_id})
            
            uuid = await api.generate(
                prompt=prompt,
                model_id=model_id,
                width=settings.width,
                height=settings.height
            )
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω UUID: {uuid}", extra={'user_id': user_id})
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            retries = 0
            max_retries = 60  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è - 60 —Å–µ–∫—É–Ω–¥
            
            while retries < max_retries:
                try:
                    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {retries + 1})", extra={'user_id': user_id})
                    image_data = await api.check_generation(uuid)
                    break
                except Exception as e:
                    if "still in progress" not in str(e):
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}", extra={'user_id': user_id})
                        raise
                    logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è", extra={'user_id': user_id})
                    await asyncio.sleep(1)
                    retries += 1
            
            if retries >= max_retries:
                raise Exception("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_id = str(uuid_lib.uuid4())
            user_states[user_id].last_image = image_data
            user_states[user_id].last_image_id = image_id
            
            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", extra={'user_id': user_id})
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            await message.answer_photo(
                photo=types.BufferedInputFile(
                    image_data,
                    filename="generated_image.png"
                ),
                caption=(
                    f"üé® –°—Ç–∏–ª—å: <b>{style_info['label']}</b>\n"
                    f"üìè –†–∞–∑–º–µ—Ä: <b>{settings.width}x{settings.height}</b>\n"
                    f"üí≠ –ü—Ä–æ–º–ø—Ç: <i>{message.text}</i>"
                ),
                reply_markup=get_image_keyboard(image_id),
                parse_mode=ParseMode.HTML
            )
            
            logger.info(
                f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
                extra={
                    'user_id': user_id,
                    'prompt': prompt,
                    'style': settings.style,
                    'size': f"{settings.width}x{settings.height}"
                }
            )
            
        except Exception as e:
            error_message = str(e)
            if "html" in error_message.lower():
                error_message = "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º"
            elif "401" in error_message:
                error_message = "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏"
            elif "415" in error_message:
                error_message = "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"
            elif "429" in error_message:
                error_message = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
            elif "500" in error_message:
                error_message = "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
            elif "503" in error_message:
                error_message = "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            elif "timeout" in error_message.lower():
                error_message = "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞"
            
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {error_message}",
                exc_info=True,
                extra={
                    'user_id': user_id,
                    'prompt': prompt,
                    'error': error_message
                }
            )
            
            await message.answer(
                Messages.ERROR_GEN.format(error=error_message),
                reply_markup=get_main_keyboard()
            )
        
        finally:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            try:
                await status_message.delete()
            except Exception:
                pass
        
    except Exception as e:
        error_message = str(e)
        if "html" in error_message.lower():
            error_message = "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º"
            
        logger.error(
            f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ generate_image: {error_message}",
            exc_info=True,
            extra={'user_id': user_id}
        )
        
        try:
            await message.answer(
                Messages.ERROR_CRITICAL,
                reply_markup=get_main_keyboard()
            )
        except Exception:
            pass

@dp.callback_query(lambda c: c.data.startswith(CallbackData.REMOVE_BG))
async def process_remove_background(callback_query: CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        image_id = callback_query.data.replace(CallbackData.REMOVE_BG, "")
        
        logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_id}", extra={'user_id': user_id})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (not user_states[user_id].last_image or 
            user_states[user_id].last_image_id != image_id):
            logger.warning("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ", extra={'user_id': user_id})
            await callback_query.answer("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_message = await callback_query.message.answer(Messages.REMOVING_BG)
        
        try:
            # –£–¥–∞–ª—è–µ–º —Ñ–æ–Ω
            image_without_bg = await ImageProcessor.remove_background(user_states[user_id].last_image)
            
            logger.info("–§–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", extra={'user_id': user_id})
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            await callback_query.message.answer_photo(
                photo=types.BufferedInputFile(
                    image_without_bg,
                    filename="image_without_bg.png"
                ),
                caption=Messages.BG_REMOVED,
                reply_markup=get_main_keyboard()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ–Ω–∞: {str(e)}", exc_info=True, extra={'user_id': user_id})
            await callback_query.message.answer(Messages.ERROR_CRITICAL)
            
        finally:
            await processing_message.delete()
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ–Ω–∞: {str(e)}", exc_info=True, extra={'user_id': user_id})
        await callback_query.message.answer(Messages.ERROR_CRITICAL)

@dp.callback_query(lambda c: c.data == CallbackData.STYLES)
async def show_styles(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    current_style = user_settings[user_id].style
    style_label = IMAGE_STYLES[current_style]["label"]
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é —Å—Ç–∏–ª–µ–π", extra={'user_id': user_id})
    
    await update_message(
        callback_query.message,
        Messages.STYLES.format(style_label=style_label),
        get_styles_keyboard()
    )
    await callback_query.answer()

@dp.callback_query(lambda c: c.data.startswith(CallbackData.STYLE_PREFIX))
async def process_style_change(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç–∏–ª—è –∏–∑ callback_data
        style_id = callback_query.data[len(CallbackData.STYLE_PREFIX):]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π —Å—Ç–∏–ª—å
        if style_id not in IMAGE_STYLES:
            await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∏–ª—å", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∏–ª–µ
        style_info = IMAGE_STYLES[style_id]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_settings[callback_query.from_user.id].style = style_id
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Å—Ç–∏–ª—è
        message_text = (
            f"{Emoji.SUCCESS} –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: <b>{style_info['label']}</b>\n"
            f"\n"
            f"<i>{style_info['description']}</i>"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.edit_text(
            text=message_text,
            reply_markup=get_prompt_keyboard(),
            parse_mode=ParseMode.HTML
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
        user_states[callback_query.from_user.id].awaiting_prompt = True
        
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"Error in process_style_change: {e}", exc_info=True)
        await callback_query.answer(
            Messages.ERROR_CRITICAL,
            show_alert=True
        )

def get_image_keyboard(image_id: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    keyboard = [
        [InlineKeyboardButton(
            text=f"{Emoji.REMOVE_BG} –£–¥–∞–ª–∏—Ç—å —Ñ–æ–Ω",
            callback_data=f"{CallbackData.REMOVE_BG}{image_id}"
        )],
        [InlineKeyboardButton(
            text=f"{Emoji.CREATE} –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ",
            callback_data=CallbackData.GENERATE
        )],
        [InlineKeyboardButton(
            text=f"{Emoji.BACK} –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data=CallbackData.BACK
        )]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_main_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{Emoji.CREATE} –°–æ–∑–¥–∞—Ç—å", callback_data=CallbackData.GENERATE)],
        [InlineKeyboardButton(text=f"{Emoji.SETTINGS} –°—Ç–∏–ª–∏", callback_data=CallbackData.STYLES)],
        [InlineKeyboardButton(text=f"{Emoji.SETTINGS} –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=CallbackData.SETTINGS)],
        [InlineKeyboardButton(text=f"{Emoji.HELP} –ü–æ–º–æ—â—å", callback_data=CallbackData.HELP)]
    ])

def get_settings_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ä–∞–∑–º–µ—Ä–æ–≤"""
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    for size_key, size_config in IMAGE_SIZES.items():
        keyboard.append([
            InlineKeyboardButton(
                text=f"{size_config['label']} - {size_config['description']}",
                callback_data=f"{CallbackData.SIZE_PREFIX}{size_key}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([
        InlineKeyboardButton(
            text=f"{Emoji.BACK} –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data=CallbackData.BACK
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_styles_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç–∏–ª–µ–π"""
    keyboard = []
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∏–ª—è, –ø–æ 2 –≤ —Ä—è–¥
    current_row = []
    for style_id, style_info in IMAGE_STYLES.items():
        button = InlineKeyboardButton(
            text=style_info["label"],
            callback_data=f"{CallbackData.STYLE_PREFIX}{style_id}"
        )
        current_row.append(button)
        
        if len(current_row) == 2:
            keyboard.append(current_row)
            current_row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    if current_row:
        keyboard.append(current_row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([
        InlineKeyboardButton(
            text=f"{Emoji.BACK} –ù–∞–∑–∞–¥",
            callback_data=CallbackData.BACK
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_prompt_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{Emoji.SETTINGS} –°—Ç–∏–ª—å", callback_data=CallbackData.STYLES)],
        [InlineKeyboardButton(text=f"{Emoji.SETTINGS} –†–∞–∑–º–µ—Ä", callback_data=CallbackData.SETTINGS)],
        [InlineKeyboardButton(text=f"{Emoji.BACK} –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=CallbackData.BACK)]
    ])

def get_back_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{Emoji.BACK} –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=CallbackData.BACK)]
    ])

async def main():
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot, skip_updates=True)

if __name__ == '__main__':
    asyncio.run(main())
