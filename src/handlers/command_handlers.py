from aiogram import types
from aiogram.types import CallbackQuery, FSInputFile, BufferedInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging
import os
from collections import defaultdict
import uuid as uuid_lib

from ..models.user_state import UserState, UserSettings
from ..utils.image_processor import ImageProcessor
from ..constants.messages import Messages
from ..constants.bot_constants import Emoji, CallbackData, IMAGE_SIZES, IMAGE_STYLES
from ..api.fusion_brain import Text2ImageAPI, CensorshipError

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = defaultdict(UserState)
user_settings = defaultdict(UserSettings)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

async def send_welcome(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = get_main_keyboard()
    await message.answer(Messages.WELCOME, reply_markup=keyboard, parse_mode="HTML")

async def show_help(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    keyboard = get_back_keyboard()
    await callback_query.message.edit_text(
        Messages.HELP,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback_query.answer()

async def show_settings(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user_id = callback_query.from_user.id
    settings = user_settings[user_id]
    keyboard = get_settings_keyboard()
    
    await callback_query.message.edit_text(
        Messages.SETTINGS.format(
            width=settings.width,
            height=settings.height
        ),
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback_query.answer()

async def process_size_change(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    user_id = callback_query.from_user.id
    size_key = callback_query.data.replace(CallbackData.SIZE_PREFIX, "")
    
    if size_key in IMAGE_SIZES:
        size_data = IMAGE_SIZES[size_key]
        user_settings[user_id].width = size_data["width"]
        user_settings[user_id].height = size_data["height"]
        
        await callback_query.message.edit_text(
            Messages.SIZE_CHANGED.format(size=size_data["label"]),
            reply_markup=get_back_keyboard(),
            parse_mode="HTML"
        )
    else:
        await callback_query.message.edit_text(
            Messages.ERROR_SIZE,
            reply_markup=get_back_keyboard(),
            parse_mode="HTML"
        )
    
    await callback_query.answer()

async def process_remove_background(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    user_id = callback_query.from_user.id
    state = user_states[user_id]
    
    if not state.last_image:
        await callback_query.answer("–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    status_message = await callback_query.message.edit_text(
        Messages.REMOVING_BG,
        parse_mode="HTML"
    )
    
    try:
        # –£–¥–∞–ª—è–µ–º —Ñ–æ–Ω
        result = await ImageProcessor.remove_background(state.last_image)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await callback_query.message.answer_photo(
            BufferedInputFile(
                result,
                filename=f"no_bg_{uuid_lib.uuid4()}.png"
            ),
            caption=Messages.BG_REMOVED,
            reply_markup=get_image_keyboard(state.last_image_id),
            parse_mode="HTML"
        )
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await status_message.delete()
        
    except Exception as e:
        logger.error(f"Error removing background: {str(e)}")
        await status_message.edit_text(
            f"{Messages.ERROR_GEN.format(error=str(e))}",
            parse_mode="HTML"
        )
    
    await callback_query.answer()

def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é"""
    builder = InlineKeyboardBuilder()
    builder.button(text=f"{Emoji.CREATE} –°–æ–∑–¥–∞—Ç—å", callback_data=CallbackData.GENERATE)
    builder.button(text=f"{Emoji.SETTINGS} –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=CallbackData.SETTINGS)
    builder.button(text=f"{Emoji.HELP} –ü–æ–º–æ—â—å", callback_data=CallbackData.HELP)
    builder.adjust(2, 1)
    return builder.as_markup()

def get_settings_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ä–∞–∑–º–µ—Ä–æ–≤"""
    builder = InlineKeyboardBuilder()
    
    for size_key, size_data in IMAGE_SIZES.items():
        builder.button(
            text=size_data["label"],
            callback_data=f"{CallbackData.SIZE_PREFIX}{size_key}"
        )
    
    builder.button(text=f"{Emoji.BACK} –ù–∞–∑–∞–¥", callback_data=CallbackData.BACK)
    builder.adjust(1)
    return builder.as_markup()

def get_styles_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç–∏–ª–µ–π"""
    builder = InlineKeyboardBuilder()
    
    for style_key, style_data in IMAGE_STYLES.items():
        builder.button(
            text=style_data["label"],
            callback_data=f"{CallbackData.STYLE_PREFIX}{style_key}"
        )
    
    builder.button(text=f"{Emoji.BACK} –ù–∞–∑–∞–¥", callback_data=CallbackData.BACK)
    builder.adjust(2)
    return builder.as_markup()

def get_prompt_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞"""
    builder = InlineKeyboardBuilder()
    builder.button(text=f"{Emoji.SETTINGS} –†–∞–∑–º–µ—Ä", callback_data=CallbackData.SETTINGS)
    builder.button(text=f"{Emoji.BACK} –ù–∞–∑–∞–¥", callback_data=CallbackData.BACK)
    builder.adjust(2)
    return builder.as_markup()

def get_back_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    builder = InlineKeyboardBuilder()
    builder.button(text=f"{Emoji.BACK} –ù–∞–∑–∞–¥", callback_data=CallbackData.BACK)
    return builder.as_markup()

def get_image_keyboard(image_id: str):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    builder.button(text=f"{Emoji.REMOVE_BG} –£–¥–∞–ª–∏—Ç—å —Ñ–æ–Ω", callback_data=CallbackData.REMOVE_BG)
    builder.button(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=CallbackData.REGENERATE)
    builder.button(text=f"{Emoji.BACK} –í –º–µ–Ω—é", callback_data=CallbackData.BACK)
    builder.adjust(2, 1)
    return builder.as_markup()
